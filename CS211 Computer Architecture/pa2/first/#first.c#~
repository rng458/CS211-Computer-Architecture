#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct node {
  char* name;
  struct node* next;
};

struct node* allocateVert(char* identity) {
  struct node* temp = malloc(sizeof(struct node));
  temp->name = identity;
  temp->next = 0;
  return temp;
}

struct node** makeGraph(int gSize) {
  struct node** nGraph = malloc(gSize*sizeof(struct node*));
  return nGraph;
}

void freeGraph(struct node** graph, int gSize) {
  for(int i = 0; i < gSize; i++) {
    struct node* ptr = graph[i];
    while(ptr != 0) {
      struct node* temp = ptr;
      ptr = ptr->next;
      free(temp);
    }
  }
  free(graph);
}

int main(int argc, char* argv[argc+1]) {

  FILE* file1 = fopen(argv[1], "r");
  //FILE* file2 = fopen(argv[2], "r");

  /*if(file1 == 0 || file2 == 0) {
    printf("error\n");
    return EXIT_SUCCESS;
    }*/

  int graphSize;
  fscanf(file1, "%d\n", &graphSize);
  struct node** mGraph;
  mGraph = makeGraph(graphSize);

  for(int i = 0; i < graphSize; i++) {
    char vertname[16];
    char* vertnameptr = &vertname[0];
    fscanf(file1, "%s\n", vertnameptr);
    struct node* nVert = allocateVert(vertname);
    mGraph[i] = nVert;
  }

  char vert1name[16];
  char vert2name[16];
  char* vert1ptr = &vert1name[0];
  char* vert2ptr = &vert2name[0];
  printf("%ld", sizeof(vert1ptr[2]));
  while(fscanf(file1, "%s %s\n", vert1ptr, vert2ptr) != EOF) {
    struct node* head1 = 0;
    struct node* head2 = 0;

    for(int i = 0; i < graphSize; i++) {
      if(strcmp(vert1ptr, mGraph[i]->name) == 0) {
	head1 = mGraph[i];
      }
      if(strcmp(vert2ptr, mGraph[i]->name) == 0) {
	head2 = mGraph[2];
      }
      if(head1 != 0 && head2 != 0) {
	break;
      }
    }
    
    struct node* dynNode = 
    
  }

  freeGraph(mGraph, graphSize);

  fclose(file1);
  //fclose(file2);
  return EXIT_SUCCESS;
}
